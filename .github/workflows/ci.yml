name: CI
env:
  node-version: 18

on:
  push:
    branches:
      - main
      - artifacts
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and test
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}
    outputs:
      current_tag: ${{ env.newtag }}
      previous_tag: ${{ env.oldtag }}

    steps:
    - name: Set env variables
      id: env-vars
      shell: bash
      run: |
        if [[ "${GITHUB_REPOSITORY}" == 'headsetapp/headset-electron' && ("${GITHUB_REF_TYPE}" == 'tag' || "${GITHUB_REF}" == 'refs/heads/artifacts') ]]; then
          echo "sign=yes" >> ${GITHUB_ENV}
        else
          echo "sign=no" >> ${GITHUB_ENV}
        fi
    - name: Set up npm cache
      uses: actions/cache@v3.3.2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.node-version }}
    - name: Install Python dependencies
      run: python -m pip install --upgrade packaging setuptools
    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: sudo apt-get install fakeroot dpkg rpm lintian gnupg2 xvfb
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install graphicsmagick imagemagick
    - name: Fix git checkout line endings
      run: git config --global core.autocrlf input
    - name: Get source
      uses: actions/checkout@v4
    - name: Get tags
      id: tags
      if: matrix.os == 'ubuntu-22.04' && github.ref_type	== 'tag'
      run: |
        git fetch --tags -f
        ./bin/getTags.sh
    - name: Install npm dependencies
      run: npm ci
    - name: Linting
      run: npm run lint

    - name: Building (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: npm run build:linux
    - name: Building (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run build:darwin
      env:
        CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
        SIGN: ${{ env.sign }}
    - name: Building (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run build:windows
      env:
        CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        SIGN: ${{ env.sign }}
    - name: Signing RedHat installer
      if: matrix.os == 'ubuntu-22.04' && env.sign == 'yes'
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase=${{ secrets.LINUX_CERT_PASSWORD }} --output headset_priv.asc sig/linux-headset_priv.asc.gpg
        npm run sign:redhat

    - name: Testing app (macOS, Windows)
      if: matrix.os != 'ubuntu-22.04'
      run: npm run test:app
    - name: Testing Linux
      if: matrix.os == 'ubuntu-22.04'
      run: |
        xvfb-run --auto-servernum npm run test:app
        npm run test:linux

    - name: Test signatures (macOS)
      if: matrix.os == 'macos-latest' && env.sign == 'yes'
      run: npm run test:sign

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: github.ref_type	== 'tag' || github.ref == 'refs/heads/artifacts'
      with:
        name: installers-${{ matrix.os }}
        path: build/installers/*

  publish:
    name: Publish to Github Releases
    needs: build
    runs-on: 'ubuntu-22.04'
    if: github.ref_type	== 'tag'

    steps:
    - run: mkdir -p build/installers
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: build/installers/
    # Artifacts are downloaded to their own sub-directory, we need to move them
    - name: Move artifacts from their subdirectories
      working-directory: build/installers/
      run: |
        find . -type f -exec mv {} . \;
        find . -type d -delete
    - name: Create a release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: build/installers/*
        body: https://github.com/headsetapp/headset-electron/compare/v${{ needs.build.outputs.previous_tag }}...v${{ needs.build.outputs.current_tag }}
        draft: false
        token: ${{ secrets.GITHUB_TOKEN }}

  linux_repo:
    name: Publish Linux repositories
    needs: build
    runs-on: 'ubuntu-22.04'
    if: github.ref_type	== 'tag'

    steps:
    - name: Install Dependencies
      run: sudo apt-get install reprepro createrepo-c
    - name: Get source
      uses: actions/checkout@v4
    - run: mkdir -p build/installers
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: installers-ubuntu-22.04
        path: build/installers/
    - name: Creating repositories
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase=${{ secrets.LINUX_CERT_PASSWORD }} --output headset_priv.asc sig/linux-headset_priv.asc.gpg
        npm run repo
    - name: Deploy Linux repositories
      uses: crazy-max/ghaction-github-pages@v4.0.0
      with:
        build_dir: gh-pages
        commit_message: Deploy ${{ needs.build.outputs.current_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  chocolatey:
    name: Publish to Chocolatey
    needs: build
    runs-on: 'windows-latest'
    if: github.ref_type	== 'tag' && github.repository == 'headsetapp/headset-electron'
    steps:
    - name: Get source
      uses: actions/checkout@v4
    - run: mkdir -p build/installers
    - name: Fix git checkout line endings
      run: git config --global core.autocrlf input
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: installers-windows-latest
        path: build/installers/
    - name: Creating nuspec
      run: npm run choco
    - name: Publishing
      working-directory: ./build
      run: choco push -s "https://push.chocolatey.org/" -k ${{ secrets.CHOCO_TOKEN }}

  homebrew:
    name: Publish to Homebrew cask
    needs: [build, publish]
    runs-on: 'macos-latest'
    if: github.ref_type	== 'tag' && github.repository == 'headsetapp/headset-electron'
    steps:
    - name: Delete credentials
      run: printf "protocol=https\nhost=github.com\n" | git credential-osxkeychain erase
    - name: Update brew
      run: brew update
    - name: Bump the Homebrew cask
      run: brew bump-cask-pr --no-browse --verbose --version="${{ needs.build.outputs.current_tag }}" headset
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW }}
